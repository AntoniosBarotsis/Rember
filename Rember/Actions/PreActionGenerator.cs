using Rember.FileStuff;
using Rember.Tasks;

namespace Rember.Actions;

public class PreActionGenerator
{
    public PreActionGenerator(ITask task, Type type)
    {
        Text = "";
        Task = task;
        Type = type;
    }

    private string Text { get; set; }
    private HookAccessor? HookAccessor { get; set; }
    private ITask Task { get; }
    private Type Type { get; }

    public PreActionGenerator AddBuildScript()
    {
        Generate(Task.GetCommand(Events.Build), Task.GetToolName(Events.Build), Task.GetCommandDescription(Events.Build));
        return this;
    }

    public PreActionGenerator AddTestScript()
    {
        Generate(Task.GetCommand(Events.Tests), Task.GetToolName(Events.Tests), Task.GetCommandDescription(Events.Tests));
        return this;
    }

    // TODO Ask user if they want to build/test instead of enforcing it every time.
    private void Generate(string command, string name, string commandDescription)
    {
        var shebang = Text == "" ? "#!/bin/sh\n" : "";
        var inputName = commandDescription + "Input";
        var metadata = Text == ""
            ? @$"# Info generated by Rember, do not edit!
#bt:{name}
#
"
            : "";

        var res = @$"{shebang}
{metadata}
exec < /dev/tty

echo """"

echo ""Do you want to run {commandDescription}? [Y/n]""
read {inputName}

if [ -z ${inputName} ] || [ ${inputName} = ""Y"" ] || [ ${inputName} = ""y"" ]
then
    echo ""==============""
    echo ""Running {commandDescription} ({command})""
    {command} &> /dev/null
    status=$?

    if [ $status -eq 1 ]
    then
        echo ""{commandDescription} failed, exiting...""
    exit $status
        fi

    echo ""{commandDescription} passed!""
    echo ""==============""
    echo """"
    echo """"  
fi
";

        Text += res;
    }

    public void WriteToFile()
    {
        var path = Directory.GetCurrentDirectory() + $"/.git/hooks/pre-{Type.ToString().ToLower()}";
        HookAccessor ??= new HookAccessor(path, Text);
        HookAccessor.SaveChanges();
    }
}

public enum Events
{
    Build,
    Tests
}

public enum Type
{
    Commit,
    Push
}